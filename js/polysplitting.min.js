/*
 *  polysplitting - v1.0
 *  Google Maps JavaScript API v3 library to split an existing polygon into two separate polygons
 *  https://github.com/tmentink/google-maps-polygon-splitting
 *
 *  Made by Trent Mentink
 */

function myLineSegment(t,e,n,o){this.startCoords=t,this.endCoords=e,this.startIndex=n,this.endIndex=o,this.x1=t.lng(),this.y1=t.lat(),this.x2=e.lng(),this.y2=e.lat()}function myIntersectionPoint(t,e,n){this.coordinates=t,this.originalLine=e,this.selectionLine=n}function myPointInside(t,e){this.coordinates=t,this.pathIndex=e}function debounce(t,e){var n=null;return function(){var o=this,i=arguments;clearTimeout(n),n=setTimeout(function(){t.apply(o,i)},e)}}google.maps.Polygon.prototype.getBounds=function(){for(var t=new google.maps.LatLngBounds,e=this.getPath(),n=0,o=e.getLength();o>n;n++)t.extend(e.getAt(n));return t},google.maps.Polygon.prototype.initSelection=function(t){var e=this.getMap(),n=this.getBounds(),o=n.getNorthEast(),i=n.getSouthWest(),r=new google.maps.LatLng(o.lat(),i.lng()),s=new google.maps.LatLng(i.lat(),o.lng()),a=[r,o,s,i],g=new google.maps.Polygon({paths:a,draggable:!0,editable:!0,strokeColor:"#000000",strokeOpacity:.8,strokeWeight:2,fillColor:"#000000",fillOpacity:.35,zIndex:1e3});if(g.setMap(e),"validate"===t){var l=debounce(function(t){g.validate(t)||alert("Selection cant intersect itself")},300);google.maps.event.addListener(g.getPath(),"insert_at",l),google.maps.event.addListener(g.getPath(),"remove_at",l),google.maps.event.addListener(g.getPath(),"set_at",l)}return g},google.maps.Polygon.prototype.getLineSegments=function(t){"number"!=typeof t&&(t=-1);var e=[],n=this.getPath(),o=n.getLength()-1;if(t>=0&&o>=t){for(var i=0===t?o:t-1,r=0,s=2;s>r;r++){var a=n.getAt(i),g=i;if(i===o)var l=n.getAt(0),h=0;else var l=n.getAt(i+1),h=i+1;i===o?i=0:i++,e.push(new myLineSegment(a,l,g,h))}return e}for(var r=0,s=n.getLength();s>r;r++){var a=n.getAt(r),g=r;if(r==o)var l=n.getAt(0),h=0;else var l=n.getAt(r+1),h=r+1;e.push(new myLineSegment(a,l,g,h))}return e},google.maps.Polygon.prototype.validate=function(t){"number"!=typeof t&&(t=null);for(var e=this.getLineSegments(),n=this.getLineSegments(t),o=0,i=n.length;i>o;o++)for(var r=0,s=e.length;s>r;r++)if(n[o].isIntersecting(e[r]))return!1;return!0},google.maps.Polygon.prototype.getRotation=function(){for(var t=(this.getPath(),this.getLineSegments()),e=0,n=0,o=t.length;o>n;n++)e+=t[n].getUnderneathArea();var i=e>0?1:-1;return i},google.maps.Polygon.prototype.countPointsInside=function(t){if(!(t instanceof google.maps.Polygon))return null;for(var e=0,n=t.getPath(),o=0,i=n.getLength();i>o;o++)google.maps.geometry.poly.containsLocation(n.getAt(o),this)&&e++;return e},google.maps.Polygon.prototype.getPointsInside=function(t){if(!(t instanceof google.maps.Polygon))return null;for(var e=[],n=t.getPath(),o=0,i=n.getLength();i>o;o++)if(google.maps.geometry.poly.containsLocation(n.getAt(o),this)){var r=n.getAt(o),s=o;e.push(new myPointInside(r,s))}return e},google.maps.Polygon.prototype.containsPoint=function(t){return t instanceof google.maps.LatLng?google.maps.geometry.poly.containsLocation(t,this):null},google.maps.Polygon.prototype.countIntersections=function(t){if(!(t instanceof google.maps.Polygon))return null;for(var e=0,n=this.getLineSegments(),o=t.getLineSegments(),i=0,r=n.length;r>i;i++)for(var s=0,a=o.length;a>s;s++)n[i].isIntersecting(o[s])&&e++;return e},google.maps.Polygon.prototype.getIntersections=function(t){function e(t){var e,n,o=t[0],i=t[1];if(o.isOnSameLine(i)){var r=google.maps.geometry.spherical.computeDistanceBetween(o.coordinates,o.originalLine.startCoords),s=google.maps.geometry.spherical.computeDistanceBetween(i.coordinates,o.originalLine.startCoords);s>r?(e=o,n=i):(e=i,n=o)}else o.originalLine.startIndex<i.originalLine.startIndex?(e=o,n=i):(e=i,n=o);return[e,n]}if(!(t instanceof google.maps.Polygon))return null;for(var n=[],o=this.getLineSegments(),i=t.getLineSegments(),r=0,s=o.length;s>r;r++)for(var a=0,g=i.length;g>a;a++)if(o[r].isIntersecting(i[a])){var l=o[r].getIntersectionPoint(i[a]),h=o[r],p=i[a];n.push(new myIntersectionPoint(l,h,p))}var u=e(n);return u},google.maps.Polygon.prototype.split=function(t){if(!(t instanceof google.maps.Polygon))return alert("Parameter must be a google.maps.Polygon object."),null;if(!t.validate())return alert("Parameter cannot intersect with itself."),null;var e=this.countIntersections(t);if(2!=e)return alert("You have "+e+" intersections. Polygons must have exactly two intersections."),null;var n=[],o=[],i=this.getPath(),r=t.getPath(),s=i.getLength()-1,a=r.getLength()-1,g=this.getRotation()===t.getRotation(),l=this.getIntersections(t),h=this.getPointsInside(t),p=h.length,u=t.getPointsInside(this),c=u.length;if(n.push(l[1].coordinates),o.push(l[1].coordinates),t.containsPoint(l[1].originalLine.endCoords)){for(var d=l[1].originalLine.endIndex,f=0,m=c;m>f;f++)o.push(i.getAt(d)),d===s?d=0:d++;if(o.push(l[0].coordinates),p>0)if(g){for(var d=l[1].selectionLine.startIndex,f=0,y=p;y>f;f++){for(var L=0,v=p;v>L;L++)h[L].pathIndex===d&&n.push(h[L].coordinates);0===d?d=a:d--}for(var d=l[0].selectionLine.endIndex,f=0,y=p;y>f;f++){for(var L=0,v=p;v>L;L++)h[L].pathIndex===d&&o.push(h[L].coordinates);d===a?d=0:d++}}else{for(var d=l[1].selectionLine.endIndex,f=0,y=p;y>f;f++){for(var L=0,v=p;v>L;L++)h[L].pathIndex===d&&n.push(h[L].coordinates);d===a?d=0:d++}for(var d=l[0].selectionLine.startIndex,f=0,y=p;y>f;f++){for(var L=0,v=p;v>L;L++)h[L].pathIndex===d&&o.push(h[L].coordinates);0===d?d=a:d--}}n.push(l[0].coordinates);for(var d=l[0].originalLine.endIndex,f=0,m=i.getLength()-c;m>f;f++)n.push(i.getAt(d)),d===s?d=0:d++}else{for(var d=l[1].originalLine.endIndex,f=0,m=i.getLength()-c;m>f;f++)n.push(i.getAt(d)),d===s?d=0:d++;if(n.push(l[0].coordinates),p>0)if(g){for(var d=l[0].selectionLine.startIndex,f=0,y=p;y>f;f++){for(var L=0,v=p;v>L;L++)h[L].pathIndex===d&&n.push(h[L].coordinates);0===d?d=a:d--}for(var d=l[1].selectionLine.endIndex,f=0,y=p;y>f;f++){for(var L=0,v=p;v>L;L++)h[L].pathIndex===d&&o.push(h[L].coordinates);d===a?d=0:d++}}else{for(var d=l[0].selectionLine.endIndex,f=0,y=p;y>f;f++){for(var L=0,v=p;v>L;L++)h[L].pathIndex===d&&n.push(h[L].coordinates);d===a?d=0:d++}for(var d=l[1].selectionLine.startIndex,f=0,y=p;y>f;f++){for(var L=0,v=p;v>L;L++)h[L].pathIndex===d&&o.push(h[L].coordinates);0===d?d=a:d--}}o.push(l[0].coordinates);for(var d=l[0].originalLine.endIndex,f=0,m=c;m>f;f++)o.push(i.getAt(d)),d===s?d=0:d++}return[n,o]},myLineSegment.prototype.isIntersecting=function(t){function n(t,n,o){return a=t.lng(),b=t.lat(),c=n.lng(),d=n.lat(),e=o.lng(),f=o.lat(),(f-b)*(c-a)>(d-b)*(e-a)}if(!(t instanceof myLineSegment))return!1;var o=this.startCoords,i=this.endCoords,r=t.startCoords,s=t.endCoords;return o===r||o===s||i===r||i===s?!1:n(o,r,s)!=n(i,r,s)&&n(o,i,r)!=n(o,i,s)},myLineSegment.prototype.getSlope=function(){return this.x1===this.x2?null:this.y1===this.y2?0:(this.y2-this.y1)/(this.x2-this.x1)},myLineSegment.prototype.getYIntercept=function(){return null===this.getSlope()?null:0===this.getSlope()?this.y1:this.y1-this.getSlope()*this.x1},myLineSegment.prototype.getUnderneathArea=function(){return(this.x2-this.x1)*(this.y2+this.y1)},myLineSegment.prototype.getIntersectionPoint=function(t){if(!(t instanceof myLineSegment))return null;if(!this.isIntersecting(t))return null;var e,n,o=this.getSlope(),i=this.getYIntercept(),r=t.getSlope(),s=t.getYIntercept();return null!=i&&null!=s?0===o?(e=(i-s)/r,n=i):0===r?(e=(s-i)/o,n=s):(e=(s-i)/(o-r),n=o*e+i):null===o?0===r?(e=this.x1,n=t.y1):(e=this.x1,n=e*r+s):null===r&&(0===o?(e=t.x1,n=this.y1):(e=t.x1,n=e*o+i)),new google.maps.LatLng(n,e)},myIntersectionPoint.prototype.isOnSameLine=function(t){return t instanceof myIntersectionPoint?this.originalLine.startIndex===t.originalLine.startIndex&&this.originalLine.endIndex===t.originalLine.endIndex:!1};